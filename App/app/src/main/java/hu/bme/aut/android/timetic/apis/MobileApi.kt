/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: Timetic szervezeti backend
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package hu.bme.aut.android.timetic.apis

import io.reactivex.Completable
import retrofit2.http.DELETE
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.PUT

@JvmSuppressWildcards
interface MobileApi {
    /**
     * Cancel appointment
     * The endpoint is owned by defaultname service owner
     * @param appointmentId (required)
     */
    @DELETE("/client/appointments/{appointmentId}")
    fun clientAppointmentsAppointmentIdDelete(
        @retrofit2.http.Path("appointmentId") appointmentId: Map<String, Any?>
    ): Completable
    /**
     * Lists the appointments
     * The endpoint is owned by defaultname service owner
     */
    @GET("/client/appointments")
    fun clientAppointmentsGet(): Completable
    /**
     * Logs client into the system
     * The endpoint is owned by defaultname service owner
     */
    @GET("/client/login")
    fun clientLoginGet(): Completable
    /**
     * Lists details of the organization // no authentication required
     * The endpoint is owned by defaultname service owner
     */
    @GET("/client/organization")
    fun clientOrganizationGet(): Completable
    /**
     * Refresh client's token
     * The endpoint is owned by defaultname service owner
     */
    @GET("/client/refresh")
    fun clientRefreshGet(): Completable
    /**
     * Registers client // needs to fill the form with personal info
     * The endpoint is owned by defaultname service owner
     */
    @POST("/client/register")
    fun clientRegisterPost(): Completable
    /**
     * Share their personal/client data with the organization //client is registered by employee
     * The endpoint is owned by defaultname service owner
     */
    @GET("/client/shareDataWithOrganization")
    fun clientShareDataWithOrganizationGet(): Completable
    /**
     * Gets the data so as to create and appointment
     * The endpoint is owned by defaultname service owner
     */
    @GET("/employee/appointmentCreationData")
    fun employeeAppointmentCreationDataGet(): Completable
    /**
     * Cancels appointment
     * The endpoint is owned by defaultname service owner
     * @param appointmentId (required)
     */
    @DELETE("/employee/appointments/{appointmentId}")
    fun employeeAppointmentsAppointmentIdDelete(
        @retrofit2.http.Path("appointmentId") appointmentId: Map<String, Any?>
    ): Completable
    /**
     * Gets the appointment with the given id
     * The endpoint is owned by defaultname service owner
     * @param appointmentId (required)
     */
    @GET("/employee/appointments/{appointmentId}")
    fun employeeAppointmentsAppointmentIdGet(
        @retrofit2.http.Path("appointmentId") appointmentId: Map<String, Any?>
    ): Completable
    /**
     * Lists appointments for the employee
     * The endpoint is owned by defaultname service owner
     * @param startDate (optional)
     * @param endDate (optional)
     * @param clientName (optional)
     */
    @GET("/employee/appointments")
    fun employeeAppointmentsGet(
        @retrofit2.http.Query("startDate") startDate: Map<String, Any?>?,
        @retrofit2.http.Query("endDate") endDate: Map<String, Any?>?,
        @retrofit2.http.Query("clientName") clientName: Map<String, Any?>?
    ): Completable
    /**
     * Uploads a new appointment
     * The endpoint is owned by defaultname service owner
     */
    @POST("/employee/appointments")
    fun employeeAppointmentsPost(): Completable
    /**
     * Modifies appointment
     * The endpoint is owned by defaultname service owner
     */
    @PUT("/employee/appointments")
    fun employeeAppointmentsPut(): Completable
    /**
     * Lists the clients who are registered to the organization
     * The endpoint is owned by defaultname service owner
     * @param name (optional)
     */
    @GET("/employee/clients")
    fun employeeClientsGet(
        @retrofit2.http.Query("name") name: Map<String, Any?>?
    ): Completable
    /**
     * Registers a client
     * The endpoint is owned by defaultname service owner
     */
    @POST("/employee/clients")
    fun employeeClientsPost(): Completable
    /**
     * Asks for new password
     * The endpoint is owned by defaultname service owner
     */
    @GET("/employee/forgottenPassword")
    fun employeeForgottenPasswordGet(): Completable
    /**
     * Logs employee into the system
     * The endpoint is owned by defaultname service owner
     */
    @GET("/employee/login")
    fun employeeLoginGet(): Completable
    /**
     * Logs employee out of the system
     * The endpoint is owned by defaultname service owner
     */
    @GET("/employee/logout")
    fun employeeLogoutGet(): Completable
    /**
     * Returns the organization of the employee
     * The endpoint is owned by defaultname service owner
     */
    @GET("/employee/organization")
    fun employeeOrganizationGet(): Completable
    /**
     * Refresh employee's token
     * The endpoint is owned by defaultname service owner
     */
    @GET("/employee/refresh")
    fun employeeRefreshGet(): Completable
    /**
     * Creates a report of the work of the given period
     * The endpoint is owned by defaultname service owner
     * @param startDate (optional)
     * @param endDate (optional)
     */
    @GET("/employee/report")
    fun employeeReportGet(
        @retrofit2.http.Query("startDate") startDate: Map<String, Any?>?,
        @retrofit2.http.Query("endDate") endDate: Map<String, Any?>?
    ): Completable
}
